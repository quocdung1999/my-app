{"version":3,"sources":["logo.svg","App.js","serviceWorker.js"],"names":["module","exports","Board","props","state","squares","Array","fill","xIsNext","i","Square","value","this","onClick","handleClick","slice","calculateWinner","setState","status","winner","className","renderSquare","React","Component","lines","length","a","b","c","Game","ReactDOM","render","StrictMode","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sJAAAA,EAAOC,QAAU,IAA0B,kC,qICKrCC,G,8DACJ,WAAYC,GACX,IAAD,8BACE,cAAMA,IACDC,MAAQ,CACXC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJb,E,yDAOaC,GACZ,IAAD,OACE,OAAO,kBAACC,EAAD,CAAQC,MAASC,KAAKR,MAAMC,QAAQI,GACnCI,QAAW,kBAAM,EAAKC,YAAYL,Q,kCAEhCA,GAEV,IAAMJ,EAAUO,KAAKR,MAAMC,QAAQU,QAC/BC,EAAgBX,IAAYA,EAAQI,KAIxCJ,EAAQI,GAAKG,KAAKR,MAAMI,QAAU,IAAM,IACxCI,KAAKK,SAAS,CAACZ,QAAQA,EAAUG,SAAWI,KAAKR,MAAMI,a,+BAIvD,IACIU,EADEC,EAASH,EAAgBJ,KAAKR,MAAMC,SAW1C,OAHEa,EANGC,EAMM,WAAaA,EAJb,iBAAmBP,KAAKR,MAAMI,QAAU,IAAM,KAQvD,6BACE,yBAAKY,UAAY,UAAUF,GAC3B,yBAAKE,UAAY,aACdR,KAAKS,aAAa,GAClBT,KAAKS,aAAa,GAClBT,KAAKS,aAAa,IAErB,yBAAKD,UAAY,aACdR,KAAKS,aAAa,GAClBT,KAAKS,aAAa,GAClBT,KAAKS,aAAa,IAErB,yBAAKD,UAAY,aACdR,KAAKS,aAAa,GAClBT,KAAKS,aAAa,GAClBT,KAAKS,aAAa,S,GArDTC,IAAMC,YAgF1B,SAASb,EAAOP,GACd,OACE,4BAAQiB,UAAU,SAASP,QAASV,EAAMU,SACvCV,EAAMQ,OAKb,SAASK,EAAgBX,GAWvB,IAVA,IAAMmB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAf,EAAI,EAAGA,EAAIe,EAAMC,OAAQhB,IAAK,CAAC,IAAD,cACnBe,EAAMf,GADa,GAC9BiB,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIvB,EAAQqB,IAAMrB,EAAQqB,KAAOrB,EAAQsB,IAAMtB,EAAQqB,KAAOrB,EAAQuB,GACpE,OAAOvB,EAAQqB,GAGnB,OAAO,K,IAGHG,E,uKAGF,OACE,yBAAKT,UAAY,QACf,yBAAKA,UAAY,cACf,kBAAC,EAAD,OAEF,yBAAKA,UAAY,aACf,8BACA,mC,GAVSE,IAAMC,WAuCzBO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SChJNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAiHA,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ff4dafe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass Board extends React.Component{\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n    };\n  }\n  renderSquare(i)\n  {\n    return <Square value = {this.state.squares[i]} \n            onClick = {() => this.handleClick(i)}/>;\n  }\n  handleClick(i)\n  {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i])\n    {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({squares:squares , xIsNext : !this.state.xIsNext}); \n  }\n  render()\n  {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (!winner)\n    {\n      status = \"Next player: \" + (this.state.xIsNext ? 'X' : 'O');\n    }\n    else\n    {\n      status = 'Winner: ' + winner;\n    }\n\n    return (\n      <div>\n        <div className = \"status\">{status}</div>\n        <div className = \"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className = \"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className = \"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n/*\nclass Square extends React.Component{\nconstructor(props)\n{\n  super(props);\n  this.state = {\n    value:null,\n  };\n}\n\n  render(){\n    return (\n      <button className = \"square\" \n              onClick ={ () => this.props.onClick()}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\n*/\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nclass Game extends React.Component{\n  render()\n  {\n    return(\n      <div className = \"game\">\n        <div className = \"game-board\">\n          <Board/>\n        </div>\n        <div className = \"game-info\">\n          <div>{/*status*/}</div>\n          <ol>{/*TODO*/}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React \n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game></Game>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}